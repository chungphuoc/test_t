#addsClassModal.modal.fade role="dialog"
  .modal-dialog
    .modal-content
      .modal-header
        button.close data-dismiss="modal" type="button"  Ã—
        h3.modal-title.title Class detail
      .modal-body id='model-body'
        .row
          .col-lg-3.col-lg-offset-2
            p
              b = t('activerecord.attributes.course.date')
          .col-lg-6
            p #{@course.start_date}
        .row
          .col-lg-3.col-lg-offset-2
            p
              b = t('activerecord.attributes.course.time')
          .col-lg-6
            p #{@course.start_time.strftime("%I:%M %p")} - #{@course.end_time.strftime("%I:%M %p")}
        hr
        .row
          .col-lg-3.col-lg-offset-2
            p
              b = t('activerecord.attributes.course.tuition')
          .col-lg-6
            p#course_tuition value="#{@course.tuition}" + #{@course.tuition} #{@course.currency}
        .payable-option-checkout
          h4 = t('static_text.payable_options')
          .checkbox-style
            - @course.options.each do |option|
              .checkbox-success.element.element-hover.no-border.payable-element
                = check_box_tag "payable_options_#{option.id}", option.id, false, onClick: "add_option_checkout(#{option.id},this);", class: "checkbox-option payable_options_#{option.id}"
                = label_tag "payable_options_#{option.id}" do
                  span.float-left = option.name.capitalize
                  span.option-price.float-right id="option-price-#{option.id}" data-price="#{option.price}" data-selected='0' + #{option.price} #{option.currency}
        hr
        .row
          .col-lg-3.col-lg-offset-2
            p
             b = t('activerecord.attributes.customer.point')
          .col-lg-6
            span -
            = number_field_tag :points, 0, min:0 , max: [current_user.role.point, @course.tuition].min, oninput: 'check_valid_point(this)'
            span  #{@course.currency}
            br
            i Maximum: #{[current_user.role.point, @course.tuition].min}
        hr
        .row
          .col-lg-3.col-lg-offset-2
            p
             b = t('activerecord.attributes.enrollment.total_cost')
          .col-lg-6
            p#total-cost data-currency='#{@course.currency}' data-price='#{@course.tuition}' #{@course.tuition} #{@course.currency}
        hr
        .row
          .col-lg-3.col-lg-offset-2
            p
              b = t('static_text.attend_date')
          .col-lg-7
            = render "personal/checkouts/checkout_btn"
          //   button.btn.btn-default data-dismiss="modal" type="button"  Cancel
      .modal-footer
.course-detail
  .row.zero-margin.class-detail-section
    .basic-info
      .row.center-text.title
        h2 #{@course.name}
      .row.zero-margin.center-text
        = rating_for @course, "quality", disable_after_rate: false, enable_half: true
      .row.zero-margin.center-text.body
        .container
          .row
            .col-lg-8.col-lg-offset-2
              .col-lg-4
                h4
                  p.head = Course.human_attribute_name('station')
                  p.body-content #{@course.station_name}
              .col-lg-4
                h4
                  p.head = Course.human_attribute_name('studio')
                  p.body-content #{@course.studio.name}
              .col-lg-4
                h4
                  p.head = Course.human_attribute_name('teacher')
                  p.body-content #{@course.teacher_name}
          .row
            .col-lg-8.col-lg-offset-2
              .col-lg-4
                h4.head #{@course.start_date}
              .col-lg-4
                h4.head #{@course.start_time.strftime("%I:%M %p")} - #{@course.end_time.strftime("%I:%M %p")}
              .col-lg-4
                h4.head #{@course.kcal} #{t('activerecord.attributes.course.kcal')}
          h4.course-tuition #{@course.tuition} #{@course.currency}
    .row.payable_option
      ul.checkbox-style
        - @course.studio.options.each do |option|
          li.payable-info-element.checkbox-success.element.element-hover.no-border
            = check_box_tag "payable_options_#{option.id}", option.id, false, onClick: "add_option_checkout(#{option.id},this);", class: "checkbox-option payable_options_#{option.id}"
            = label_tag "payable_options_#{option.id}", "#{option.name.capitalize}: #{option.price} #{option.currency}"
    .row.zero-margin.center-text
      .col-lg-8.cover-section
        = image_tag @course.cover_img
      .col-lg-4
        p #{@course.description}
    hr
    .row.zero-margin.center-text.facilities
      -@studio = @course.studio
      = render 'personal/studios/facilities'
    hr
    .row.zero-margin.center-text
      .col-lg-6
        .map-wrapper style="width: 100%"
          .map#js_google_map style="height: 300px"
      .col-lg-6
        .feedback-course
          = text_area_tag :message_fb, nil, placeholder: t('static_text.message_course'), rows: 3
        .row.zero-margin
          .row
            = link_to @course.studio.name, personal_studio_path(@course.studio), class: 'studio-name-book'
          .row.studio-description
            p Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industrys standard dummy text ever since the 1500sLorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industrys standard dummy text ever since the 1500s
          .row.left-text
            ul.studio-detail
              li
                span.glyphicon.glyphicon-map-marker
                span #{@course.studio.address}
              li
                span.glyphicon.glyphicon-earphone
                span #{@course.studio.contact_number}

        = render "course_action_btn"

script src="//maps.googleapis.com/maps/api/js"
javascript:
  var position = new google.maps.LatLng(#{@course.station.latitude}, #{@course.station.longitude})
  var mapProp = {
    center: position,
    zoom: 16,
    mapTypeId: google.maps.MapTypeId.ROADMAP
  }
  var map = new google.maps.Map(document.getElementById("js_google_map"), mapProp)
  var marker = new google.maps.Marker({
    position: position,
  })
  marker.setMap(map)
